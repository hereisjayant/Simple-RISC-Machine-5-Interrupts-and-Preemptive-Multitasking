
C:/Users/herei/Desktop/CPEN/CPEN211_Winter_labs/From_Github/lab10/part4.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	ea000011 	b	4c <FPGA_IRQ4>
   4:	ea000040 	b	10c <SERVICE_UND>
   8:	ea000040 	b	110 <SERVICE_SVC>
   c:	ea000041 	b	118 <SERVICE_ABT_INST>
  10:	ea00003f 	b	114 <SERVICE_ABT_DATA>
  14:	00000000 	.word	0x00000000
  18:	ea00003f 	b	11c <SERVICE_IRQ>
  1c:	ea000057 	b	180 <ICDICER>

Disassembly of section .text:

00000040 <__cs3_region_start_ram>:
            B       SERVICE_ABT_INST        // aborted prefetch vector
            B       SERVICE_ABT_DATA        // aborted data vector
.word       0 // unused vector

            B       SERVICE_IRQ             // IRQ interrupt vector
            B       SERVICE_FIQ             // FIQ interrupt vector
  40:	00000000 	.word	0x00000000

00000044 <CHAR_BUFFER>:
  44:	00000000 	.word	0x00000000

00000048 <CHAR_FLAG>:
  48:	00000000 	.word	0x00000000

0000004c <_start>:

.text
.global     _start
_start:
/* Set up stack pointers for IRQ and SVC processor modes */
            MOV     R1, #0b11010010         // interrupts masked, MODE = IRQ
  4c:	e3a010d2 	mov	r1, #210	; 0xd2
            MSR     CPSR_c, R1              // change to IRQ mode
  50:	e121f001 	msr	CPSR_c, r1
            LDR     SP, =A9_ONCHIP_END - 3  // set IRQ stack to top of A9 onchip memory
  54:	e3e0d003 	mvn	sp, #3
/* Change to SVC (supervisor) mode with interrupts disabled */
            MOV     R1, #0b11010011         // interrupts masked, MODE = SVC
  58:	e3a010d3 	mov	r1, #211	; 0xd3
            MSR     CPSR, R1                // change to supervisor mode
  5c:	e129f001 	msr	CPSR_fc, r1
            LDR     SP, =DDR_END - 3        // set SVC stack to top of DDR3 memory
  60:	e3e0d10f 	mvn	sp, #-1073741821	; 0xc0000003

            BL      CONFIG_GIC              // configure the ARM generic interrupt controller
  64:	eb000050 	bl	1ac <CONFIG_GIC>

                                            // write to the pushbutton KEY interrupt mask register
            LDR     R0, =KEY_BASE           // pushbutton KEY base address
  68:	e59f0114 	ldr	r0, [pc, #276]	; 184 <ICDICER+0x4>
            MOV     R1, #0xF               // set interrupt mask bits
  6c:	e3a0100f 	mov	r1, #15
            STR     R1, [R0, #0x8]          // interrupt mask register is (base + 8)
  70:	e5801008 	str	r1, [r0, #8]

                                            // enable IRQ interrupts in the processor
            MOV     R0, #0b01010011         // IRQ unmasked, MODE = SVC
  74:	e3a00053 	mov	r0, #83	; 0x53
            MSR     CPSR_c, R0
  78:	e121f000 	msr	CPSR_c, r0

            LDR     R0, =MPCORE_PRIV_TIMER // base address of the timer
  7c:	e59f0104 	ldr	r0, [pc, #260]	; 188 <ICDICER+0x8>
            LDR     R1, =100000000        //This is the load value => 100000000/200MHZ = .5 second
  80:	e59f1104 	ldr	r1, [pc, #260]	; 18c <ICDICER+0xc>
            STR     R1, [R0]              //Writes to the Load of the TIMER
  84:	e5801000 	str	r1, [r0]
            MOV     R3, #0b111
  88:	e3a03007 	mov	r3, #7
            STR     R3, [R0, #0x8]
  8c:	e5803008 	str	r3, [r0, #8]

00000090 <CONT>:



CONT:
            BL GET_JTAG // read from the JTAG UART
  90:	eb00000a 	bl	c0 <GET_JTAG>
            CMP R0, #0 // check if a character was read
  94:	e3500000 	cmp	r0, #0
            BEQ CONT
  98:	0afffffc 	beq	90 <CONT>
            BL PUT_JTAG
  9c:	eb000000 	bl	a4 <PUT_JTAG>
            B  CONT
  a0:	eafffffa 	b	90 <CONT>

000000a4 <PUT_JTAG>:

PUT_JTAG:
            LDR     R1, =JTAG_UART_BASE // JTAG UART base address
  a4:	e59f10e4 	ldr	r1, [pc, #228]	; 190 <ICDICER+0x10>
            LDR     R2, [R1, #4] // read the JTAG UART control register
  a8:	e5912004 	ldr	r2, [r1, #4]
            LDR     R3, =0xFFFF
  ac:	e59f30e0 	ldr	r3, [pc, #224]	; 194 <ICDICER+0x14>
            ANDS    R2, R2, R3 // check for write space
  b0:	e0122003 	ands	r2, r2, r3
            BEQ   END_PUT // if no space, ignore the character
  b4:	0a000000 	beq	bc <END_PUT>
            STR     R0, [R1] // send the character
  b8:	e5810000 	str	r0, [r1]

000000bc <END_PUT>:

END_PUT:
            BX LR
  bc:	e12fff1e 	bx	lr

000000c0 <GET_JTAG>:
* Code Taken from Altera Corporation- University Program
* Subroutine to get a character from the JTAG UART
* Returns the character read in R0
*/
GET_JTAG:
            LDR     R1, =JTAG_UART_BASE // JTAG UART base address
  c0:	e59f10c8 	ldr	r1, [pc, #200]	; 190 <ICDICER+0x10>
            LDR     R0, [R1] // read the JTAG UART data register
  c4:	e5910000 	ldr	r0, [r1]
            ANDS    R2, R0, #0x8000 // check if there is new data
  c8:	e2102902 	ands	r2, r0, #32768	; 0x8000
            BEQ  RET_NULL // if no data, return 0
  cc:	0a000001 	beq	d8 <RET_NULL>
            AND     R0, R0, #0x00FF // return the character
  d0:	e20000ff 	and	r0, r0, #255	; 0xff
            B    END_GET
  d4:	ea000000 	b	dc <END_GET>

000000d8 <RET_NULL>:

RET_NULL:
            MOV R0, #0
  d8:	e3a00000 	mov	r0, #0

000000dc <END_GET>:
END_GET:
            BX LR
  dc:	e12fff1e 	bx	lr

000000e0 <IDLE>:

IDLE:
            LDR   R7,=CHAR_FLAG
  e0:	e59f70b0 	ldr	r7, [pc, #176]	; 198 <ICDICER+0x18>
            LDR   R0,[R7]
  e4:	e5970000 	ldr	r0, [r7]
            CMP   R0, #1
  e8:	e3500001 	cmp	r0, #1
            BEQ   CF_1
  ec:	0a000000 	beq	f4 <CF_1>
            B       IDLE                    // main program simply idles
  f0:	eafffffa 	b	e0 <IDLE>

000000f4 <CF_1>:

CF_1:
            LDR   R1,=CHAR_BUFFER
  f4:	e59f10a0 	ldr	r1, [pc, #160]	; 19c <ICDICER+0x1c>
            LDR   R0,[R1]
  f8:	e5910000 	ldr	r0, [r1]
            BL    PUT_JTAG
  fc:	ebffffe8 	bl	a4 <PUT_JTAG>
            MOV   R2, #0
 100:	e3a02000 	mov	r2, #0
            STR   R2, [R7]
 104:	e5872000 	str	r2, [r7]
            B     IDLE
 108:	eafffff4 	b	e0 <IDLE>

0000010c <SERVICE_UND>:

/* Define the exception service routines */

/*--- Undefined instructions --------------------------------------------------*/
SERVICE_UND:
            B       SERVICE_UND
 10c:	eafffffe 	b	10c <SERVICE_UND>

00000110 <SERVICE_SVC>:

/*--- Software interrupts -----------------------------------------------------*/
SERVICE_SVC:
            B       SERVICE_SVC
 110:	eafffffe 	b	110 <SERVICE_SVC>

00000114 <SERVICE_ABT_DATA>:

/*--- Aborted data reads ------------------------------------------------------*/
SERVICE_ABT_DATA:
            B       SERVICE_ABT_DATA
 114:	eafffffe 	b	114 <SERVICE_ABT_DATA>

00000118 <SERVICE_ABT_INST>:

/*--- Aborted instruction fetch -----------------------------------------------*/
SERVICE_ABT_INST:
            B       SERVICE_ABT_INST
 118:	eafffffe 	b	118 <SERVICE_ABT_INST>

0000011c <SERVICE_IRQ>:

/*--- IRQ ---------------------------------------------------------------------*/
SERVICE_IRQ:
            PUSH    {R0-R7, LR}
 11c:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}

/* Read the ICCIAR from the CPU interface */
            LDR     R4, =MPCORE_GIC_CPUIF
 120:	e59f4078 	ldr	r4, [pc, #120]	; 1a0 <ICDICER+0x20>
            LDR     R5, [R4, #ICCIAR]       // read from ICCIAR
 124:	e594500c 	ldr	r5, [r4, #12]

            CMP     R5, #KEYS_IRQ           //If the R5 is equal to the KEYS_IQR, then
 128:	e3550049 	cmp	r5, #73	; 0x49
            BEQ      FPGA_IRQ1_HANDLER
 12c:	0a00000d 	beq	168 <FPGA_IRQ1_HANDLER>

//This is for the JTAG_UART Interrupt:
            LDR   R0, =JTAG_UART_BASE    //R0 stores the base of JTAG
 130:	e59f0058 	ldr	r0, [pc, #88]	; 190 <ICDICER+0x10>
            LDRB  R1,[R0]                //Gets the value on JTAG in R1
 134:	e5d01000 	ldrb	r1, [r0]
            LDR   R2,=CHAR_BUFFER
 138:	e59f205c 	ldr	r2, [pc, #92]	; 19c <ICDICER+0x1c>
            LDR   R3,=CHAR_FLAG
 13c:	e59f3054 	ldr	r3, [pc, #84]	; 198 <ICDICER+0x18>
            STR   R1, [R2]
 140:	e5821000 	str	r1, [r2]
            MOV   R0, #1
 144:	e3a00001 	mov	r0, #1
            STR   R0,[R3]
 148:	e5830000 	str	r0, [r3]

//The following is for The Timer interrupt part 2
            LDR     R0, =LED_BASE           //THis gets the base of the LEDS
 14c:	e59f0050 	ldr	r0, [pc, #80]	; 1a4 <ICDICER+0x24>
            LDR     R1, =COUNTER            //THis get the COUNTER
 150:	e59f1050 	ldr	r1, [pc, #80]	; 1a8 <ICDICER+0x28>
            LDR     R2, [R1]                 //Gets the current value of the  counter
 154:	e5912000 	ldr	r2, [r1]
            ADD     R2, R2, #1              //Adds one to the current value of the counter
 158:	e2822001 	add	r2, r2, #1
            STR     R2, [R0]               //updates the counter on the timer
 15c:	e5802000 	str	r2, [r0]
            STR     R2, [R1]               //updates the counter in the program
 160:	e5812000 	str	r2, [r1]
            B       EXIT_IRQ
 164:	ea000002 	b	174 <EXIT_IRQ>

00000168 <FPGA_IRQ1_HANDLER>:


FPGA_IRQ1_HANDLER:
            CMP     R5, #KEYS_IRQ
 168:	e3550049 	cmp	r5, #73	; 0x49

0000016c <UNEXPECTED>:
UNEXPECTED: BNE     UNEXPECTED              // if not recognized, stop here
 16c:	1afffffe 	bne	16c <UNEXPECTED>

            BL      KEY_ISR
 170:	eb000036 	bl	250 <KEY_ISR>

00000174 <EXIT_IRQ>:
EXIT_IRQ:
/* Write to the End of Interrupt Register (ICCEOIR) */
            STR     R5, [R4, #ICCEOIR]      // write to ICCEOIR
 174:	e5845010 	str	r5, [r4, #16]

            POP     {R0-R7, LR}
 178:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
            SUBS    PC, LR, #4
 17c:	e25ef004 	subs	pc, lr, #4

00000180 <SERVICE_FIQ>:

/*--- FIQ ---------------------------------------------------------------------*/
SERVICE_FIQ:
            B       SERVICE_FIQ
 180:	eafffffe 	b	180 <SERVICE_FIQ>
 184:	ff200050 	.word	0xff200050
 188:	fffec600 	.word	0xfffec600
 18c:	05f5e100 	.word	0x05f5e100
 190:	ff201000 	.word	0xff201000
 194:	0000ffff 	.word	0x0000ffff
 198:	00000048 	.word	0x00000048
 19c:	00000044 	.word	0x00000044
 1a0:	fffec100 	.word	0xfffec100
 1a4:	ff200000 	.word	0xff200000
 1a8:	00000040 	.word	0x00000040

000001ac <CONFIG_GIC>:
 1ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 1b0:	e3a00049 	mov	r0, #73	; 0x49
 1b4:	e3a01001 	mov	r1, #1
 1b8:	eb00000d 	bl	1f4 <CONFIG_INTERRUPT>
 1bc:	e3a00050 	mov	r0, #80	; 0x50
 1c0:	e3a01001 	mov	r1, #1
 1c4:	eb00000a 	bl	1f4 <CONFIG_INTERRUPT>
 1c8:	e3a0001d 	mov	r0, #29
 1cc:	e3a01001 	mov	r1, #1
 1d0:	eb000007 	bl	1f4 <CONFIG_INTERRUPT>
 1d4:	e59f0060 	ldr	r0, [pc, #96]	; 23c <CONFIG_INTERRUPT+0x48>
 1d8:	e59f1060 	ldr	r1, [pc, #96]	; 240 <CONFIG_INTERRUPT+0x4c>
 1dc:	e5801004 	str	r1, [r0, #4]
 1e0:	e3a01001 	mov	r1, #1
 1e4:	e5801000 	str	r1, [r0]
 1e8:	e59f0054 	ldr	r0, [pc, #84]	; 244 <CONFIG_INTERRUPT+0x50>
 1ec:	e5801000 	str	r1, [r0]
 1f0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000001f4 <CONFIG_INTERRUPT>:
 1f4:	e92d4030 	push	{r4, r5, lr}
 1f8:	e1a041a0 	lsr	r4, r0, #3
 1fc:	e3c44003 	bic	r4, r4, #3
 200:	e59f2040 	ldr	r2, [pc, #64]	; 248 <CONFIG_INTERRUPT+0x54>
 204:	e0824004 	add	r4, r2, r4
 208:	e200201f 	and	r2, r0, #31
 20c:	e3a05001 	mov	r5, #1
 210:	e1a02215 	lsl	r2, r5, r2
 214:	e5943000 	ldr	r3, [r4]
 218:	e1833002 	orr	r3, r3, r2
 21c:	e5843000 	str	r3, [r4]
 220:	e3c04003 	bic	r4, r0, #3
 224:	e59f2020 	ldr	r2, [pc, #32]	; 24c <CONFIG_INTERRUPT+0x58>
 228:	e0824004 	add	r4, r2, r4
 22c:	e2002003 	and	r2, r0, #3
 230:	e0824004 	add	r4, r2, r4
 234:	e5c41000 	strb	r1, [r4]
 238:	e8bd8030 	pop	{r4, r5, pc}
 23c:	fffec100 	.word	0xfffec100
 240:	0000ffff 	.word	0x0000ffff
 244:	fffed000 	.word	0xfffed000
 248:	fffed100 	.word	0xfffed100
 24c:	fffed800 	.word	0xfffed800

00000250 <KEY_ISR>:
 250:	e59f0054 	ldr	r0, [pc, #84]	; 2ac <END_KEY_ISR+0x8>
 254:	e590100c 	ldr	r1, [r0, #12]
 258:	e3a0200f 	mov	r2, #15
 25c:	e580200c 	str	r2, [r0, #12]
 260:	e59f0048 	ldr	r0, [pc, #72]	; 2b0 <END_KEY_ISR+0xc>

00000264 <CHECK_KEY0>:
 264:	e3a03001 	mov	r3, #1
 268:	e0133001 	ands	r3, r3, r1
 26c:	0a000001 	beq	278 <CHECK_KEY1>
 270:	e3a02001 	mov	r2, #1
 274:	ea00000a 	b	2a4 <END_KEY_ISR>

00000278 <CHECK_KEY1>:
 278:	e3a03002 	mov	r3, #2
 27c:	e0133001 	ands	r3, r3, r1
 280:	0a000001 	beq	28c <CHECK_KEY2>
 284:	e3a02002 	mov	r2, #2
 288:	ea000005 	b	2a4 <END_KEY_ISR>

0000028c <CHECK_KEY2>:
 28c:	e3a03004 	mov	r3, #4
 290:	e0133001 	ands	r3, r3, r1
 294:	0a000001 	beq	2a0 <CHECK_KEY3>
 298:	e3a02004 	mov	r2, #4
 29c:	ea000000 	b	2a4 <END_KEY_ISR>

000002a0 <CHECK_KEY3>:
 2a0:	e3a02008 	mov	r2, #8

000002a4 <END_KEY_ISR>:
 2a4:	e5802000 	str	r2, [r0]
 2a8:	e12fff1e 	bx	lr
 2ac:	ff200050 	.word	0xff200050
 2b0:	ff200000 	.word	0xff200000
